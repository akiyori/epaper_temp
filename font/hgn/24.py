# Code generated by font_to_py.py.
# Font: HackGen35Nerd-Regular.ttf Char set:  %,-./0123456789:CVÂ°
# Cmd: font_to_py.py hgn/HackGen35Nerd-Regular.ttf 24 hgn/24.py -x -k numeric
version = '0.33'

def height():
    return 24

def baseline():
    return 18

def max_width():
    return 15

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x0e\x00\x00\x00\x07\xc0\x1f\xe0\x10\x70\x00\x30\x00\x30\x00\x70'\
b'\x00\xe0\x01\xc0\x03\x80\x03\x00\x03\x00\x03\x00\x00\x00\x00\x00'\
b'\x03\x00\x07\x80\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0f\x00\x00\x00\x1c\x00\x7e\x00\x63\x00\xc3\x00'\
b'\xc3\x00\x63\x04\x7e\x1c\x1c\xf0\x07\x80\x1c\x70\x71\xf8\x81\x8c'\
b'\x01\x0c\x01\x0c\x01\x8c\x01\xf8\x00\xf0\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x03\x80\x07\x80\x07\xc0\x03\xc0\x00\x80\x01\x80'\
b'\x01\x80\x03\x00\x06\x00\x04\x00\x0e\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xf0'\
b'\x3f\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x80\x07\x80\x07\x80\x03\x80'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00'\
b'\x00\x38\x00\x30\x00\x70\x00\x60\x00\xe0\x00\xc0\x01\xc0\x01\x80'\
b'\x03\x80\x03\x00\x07\x00\x06\x00\x06\x00\x0c\x00\x0c\x00\x18\x00'\
b'\x18\x00\x30\x00\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00'\
b'\x00\x00\x07\xc0\x1f\xe0\x18\x70\x38\x30\x30\x38\x30\x38\x33\x18'\
b'\x73\x98\x73\x98\x73\x18\x30\x38\x30\x38\x30\x38\x38\x30\x18\x70'\
b'\x1f\xe0\x07\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0e\x00\x00\x00\x03\x80\x07\x80\x07\x80\x0d\x80\x1d\x80\x09\x80'\
b'\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80'\
b'\x01\x80\x1f\xf8\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0e\x00\x00\x00\x0f\x80\x3f\xe0\x30\x70\x20\x30\x00\x30'\
b'\x00\x30\x00\x30\x00\x60\x00\xe0\x01\xc0\x03\x80\x07\x00\x0e\x00'\
b'\x1c\x00\x38\x00\x3f\xf0\x3f\xf0\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0e\x00\x00\x00\x1f\xc0\x3f\xe0\x20\x70\x00\x30'\
b'\x00\x30\x00\x70\x07\xe0\x07\xc0\x00\x70\x00\x30\x00\x38\x00\x38'\
b'\x00\x38\x00\x38\x20\x70\x3f\xe0\x1f\xc0\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\xe0\x01\xe0\x01\x60'\
b'\x03\x60\x06\x60\x06\x60\x0c\x60\x18\x60\x18\x60\x30\x60\x60\x60'\
b'\x7f\xf8\x7f\xf8\x00\x60\x00\x60\x00\x60\x00\x60\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x3f\xe0\x3f\xe0'\
b'\x38\x00\x38\x00\x38\x00\x3f\x00\x3f\xe0\x20\xf0\x00\x70\x00\x30'\
b'\x00\x38\x00\x38\x00\x30\x00\x30\x20\x70\x3f\xe0\x3f\x80\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x07\xe0'\
b'\x0f\xf0\x1c\x10\x38\x00\x30\x00\x33\xc0\x37\xe0\x3c\x70\x38\x38'\
b'\x30\x38\x30\x18\x30\x18\x30\x38\x38\x38\x18\x70\x1f\xe0\x07\xc0'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00'\
b'\x3f\xf8\x3f\xf0\x00\x30\x00\x70\x00\x60\x00\x60\x00\xe0\x00\xc0'\
b'\x01\xc0\x01\x80\x01\x80\x03\x80\x03\x00\x07\x00\x06\x00\x06\x00'\
b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00'\
b'\x00\x00\x0f\xc0\x1f\xf0\x38\x30\x30\x38\x30\x30\x18\x30\x0f\xe0'\
b'\x0f\xe0\x18\x70\x30\x30\x30\x38\x30\x18\x30\x38\x30\x38\x38\x70'\
b'\x1f\xf0\x0f\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0f\x00\x00\x00\x0f\xc0\x1f\xe0\x38\x70\x30\x30\x30\x30\x30\x38'\
b'\x30\x38\x30\x38\x38\x78\x1f\xd8\x07\x18\x00\x38\x00\x30\x00\x70'\
b'\x10\xe0\x1f\xe0\x1f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x80'\
b'\x07\x80\x07\x80\x03\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x03\x80\x07\x80\x07\x80\x03\x80\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0e\x00\x00\x00\x07\xc0\x1f\xe0\x10\x70\x00\x30'\
b'\x00\x30\x00\x70\x00\xe0\x01\xc0\x03\x80\x03\x00\x03\x00\x03\x00'\
b'\x00\x00\x00\x00\x03\x00\x07\x80\x03\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x03\xf0\x0f\xf8\x1c\x18'\
b'\x18\x00\x38\x00\x30\x00\x30\x00\x30\x00\x30\x00\x30\x00\x30\x00'\
b'\x30\x00\x38\x00\x18\x00\x1c\x18\x0f\xf8\x03\xf0\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x60\x1c\x70\x18'\
b'\x70\x18\x30\x38\x30\x30\x38\x30\x18\x30\x18\x70\x18\x60\x0c\x60'\
b'\x0c\xe0\x0c\xc0\x0e\xc0\x06\xc0\x07\x80\x07\x80\x03\x80\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x07\xc0\x0c\x40'\
b'\x08\x60\x08\x60\x0c\x40\x07\xc0\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_sparse =\
b'\x20\x00\x32\x00\x25\x00\x64\x00\x2c\x00\x96\x00\x2d\x00\xc8\x00'\
b'\x2e\x00\xfa\x00\x2f\x00\x2c\x01\x30\x00\x5e\x01\x31\x00\x90\x01'\
b'\x32\x00\xc2\x01\x33\x00\xf4\x01\x34\x00\x26\x02\x35\x00\x58\x02'\
b'\x36\x00\x8a\x02\x37\x00\xbc\x02\x38\x00\xee\x02\x39\x00\x20\x03'\
b'\x3a\x00\x52\x03\x3f\x00\x84\x03\x43\x00\xb6\x03\x56\x00\xe8\x03'\
b'\xb0\x00\x1a\x04'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 24
    return _mvfont[doff + 2:next_offs], 24, width
 
