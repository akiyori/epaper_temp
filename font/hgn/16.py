# Code generated by font_to_py.py.
# Font: HackGen35Nerd-Regular.ttf Char set:  %,-./0123456789:CVÂ°
# Cmd: font_to_py.py hgn/HackGen35Nerd-Regular.ttf 16 hgn/16.py -x -k numeric
version = '0.33'

def height():
    return 16

def baseline():
    return 12

def max_width():
    return 10

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x0a\x00\x1e\x00\x23\x00\x01\x00\x03\x00\x02\x00\x04\x00\x0c\x00'\
b'\x08\x00\x00\x00\x00\x00\x1c\x00\x0c\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0a\x00\x00\x00\x70\x00\xc8\x00\x88\x00\xc8\x80'\
b'\x7b\x80\x0c\x00\x77\x00\x84\x80\x08\x80\x04\x80\x07\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x1c\x00\x0c\x00'\
b'\x04\x00\x04\x00\x08\x00\x10\x00\x0a\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x3f\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00'\
b'\x1c\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x01\x00'\
b'\x03\x00\x02\x00\x06\x00\x04\x00\x0c\x00\x08\x00\x18\x00\x10\x00'\
b'\x30\x00\x20\x00\x20\x00\x60\x00\x00\x00\x00\x00\x00\x00\x0a\x00'\
b'\x1e\x00\x33\x00\x61\x00\x61\x00\x61\x80\x6d\x80\x6d\x80\x69\x80'\
b'\x61\x00\x61\x00\x33\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0a\x00\x0c\x00\x1c\x00\x34\x00\x24\x00\x04\x00\x04\x00\x04\x00'\
b'\x04\x00\x04\x00\x04\x00\x04\x00\x3f\x80\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0a\x00\x3e\x00\x63\x00\x03\x00\x01\x00\x03\x00\x03\x00'\
b'\x06\x00\x0c\x00\x18\x00\x30\x00\x60\x00\x7f\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0a\x00\x3e\x00\x23\x00\x01\x00\x01\x00\x03\x00'\
b'\x1c\x00\x03\x00\x01\x00\x01\x80\x01\x00\x63\x00\x7e\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0a\x00\x06\x00\x06\x00\x0a\x00\x1a\x00'\
b'\x12\x00\x22\x00\x22\x00\x42\x00\x7f\x80\x02\x00\x02\x00\x02\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x3f\x00\x20\x00\x20\x00'\
b'\x20\x00\x3e\x00\x47\x00\x03\x00\x01\x00\x01\x00\x03\x00\x47\x00'\
b'\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x1f\x00\x31\x00'\
b'\x20\x00\x60\x00\x7e\x00\x73\x00\x61\x00\x61\x80\x61\x80\x21\x00'\
b'\x33\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x7f\x00'\
b'\x01\x00\x03\x00\x02\x00\x06\x00\x06\x00\x04\x00\x0c\x00\x0c\x00'\
b'\x08\x00\x18\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00'\
b'\x1e\x00\x33\x00\x61\x00\x61\x00\x23\x00\x1c\x00\x33\x00\x61\x00'\
b'\x61\x80\x61\x80\x33\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0a\x00\x1e\x00\x33\x00\x61\x00\x61\x00\x61\x80\x61\x80\x23\x80'\
b'\x3d\x00\x01\x00\x03\x00\x26\x00\x3c\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x1c\x00\x0c\x00'\
b'\x00\x00\x00\x00\x00\x00\x0c\x00\x1c\x00\x0c\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0a\x00\x1e\x00\x23\x00\x01\x00\x03\x00\x02\x00'\
b'\x04\x00\x0c\x00\x08\x00\x00\x00\x00\x00\x1c\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0a\x00\x0f\x00\x31\x00\x20\x00\x60\x00'\
b'\x60\x00\x60\x00\x60\x00\x60\x00\x60\x00\x20\x00\x39\x00\x0f\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xc1\x80\x41\x80\x61\x00'\
b'\x61\x00\x23\x00\x33\x00\x32\x00\x12\x00\x16\x00\x1e\x00\x1c\x00'\
b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x1e\x00\x12\x00'\
b'\x12\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_sparse =\
b'\x20\x00\x22\x00\x25\x00\x44\x00\x2c\x00\x66\x00\x2d\x00\x88\x00'\
b'\x2e\x00\xaa\x00\x2f\x00\xcc\x00\x30\x00\xee\x00\x31\x00\x10\x01'\
b'\x32\x00\x32\x01\x33\x00\x54\x01\x34\x00\x76\x01\x35\x00\x98\x01'\
b'\x36\x00\xba\x01\x37\x00\xdc\x01\x38\x00\xfe\x01\x39\x00\x20\x02'\
b'\x3a\x00\x42\x02\x3f\x00\x64\x02\x43\x00\x86\x02\x56\x00\xa8\x02'\
b'\xb0\x00\xca\x02'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 16
    return _mvfont[doff + 2:next_offs], 16, width
 
